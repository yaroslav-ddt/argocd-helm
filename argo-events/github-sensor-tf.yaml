apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github-tf
spec:
  template:
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: test-dep
      eventSourceName: github
      eventName: example
      filters:
        data:
          # Type of Github event that triggered the delivery: [pull_request, push, issues, label, ...]
          # https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads
          - path: headers.X-Github-Event
            type: string
            value:
              - push
        exprs:
          - expr: modified =~ "apps-tf"
            fields:
              - name: modified
                path: body.commits.0.modified.0 #body.commits.#(modified.#(%"apps-tf*"))#.modified.0
  triggers:
    - template:
        name: github-workflow-trigger
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: github-              
              spec:
                entrypoint: main 
                arguments:
                  parameters:
                    - name: repo-url
                    - name: modified-configs
                templates:
                  - name: jq
                    inputs:
                      parameters:
                        - name: config
                      artifacts:
                        - name: tfconfig
                          path: /tfconfig                     
                    container:
                      image: stedolan/jq:latest
                      command: ["/usr/local/bin/jq"]
                      args: [
                              "'.app_name'",
                              "/tfconfig/{{inputs.parameters.config}}"
                            ]
                  - name: whalesay
                    inputs:
                      parameters:
                        - name: message
                    container:
                      image: docker/whalesay:latest
                      command: [cowsay]
                      args: [
                              "{{inputs.parameters.message}}"
                            ]                
                  - name: git
                    inputs:
                      parameters:
                        - name: repo-url
                          value: "{{workflow.parameters.repo-url}}"
                      artifacts:
                        - git:
                            repo: "{{inputs.parameters.repo-url}}"
                            singleBranch: true
                            branch: main
                            depth: 1
                          name: tfconfig
                          path: /tfconfig
                    container:
                      image: docker/whalesay:latest
                      command: [cowsay]
                      args: ["{{inputs.parameters.repo-url}}"]
                    outputs:
                      artifacts:
                        - name: tfconfig
                          path: /tfconfig
                  - name: tf-plan
                    serviceAccountName: terraform-app-sa
                    metadata:
                      labels:
                        azure.workload.identity/use: "true"
                    volumes:
                      - emptyDir: {}
                        name: tfplan
                    inputs:
                      artifacts:
                        - name: tfconfig
                          path: /tfconfig                        
                    container:
                      image: cdpargoyy.azurecr.io/cdpargoyy/argo-app:8f45797f8a5c740c3f33d4458210273c63d57645
                      name: tf-app
                      args: [
                              "terraform",
                              "plan",
                              "-input=false",
                              "-out=/tfplan/tfplan",
                              "-var-file=/tfconfig/apps-tf/testapp/config.tfvars.json",
                              "-var",
                              "oidc_issuer_url=\"$(OIDC_ISSUER_URL)\"",
                              "-var",
                              "virtual_network_subnet_ids=[$(VIRTUAL_NETWORK_SUBNET_IDS)]"
                            ]
                      env:
                        - name: ARM_SUBSCRIPTION_ID
                          valueFrom:
                            configMapKeyRef:
                              name: tf-configmap
                              key: az_subscription_id
                        - name: RG_SA_STATE
                          valueFrom:
                            configMapKeyRef:
                              name: tf-configmap
                              key: state_rg
                        - name: SA_STATE
                          valueFrom:
                            configMapKeyRef:
                              name: tf-configmap
                              key: state_sa
                        - name: CONTAINER_STATE
                          valueFrom:
                            configMapKeyRef:
                              name: tf-configmap
                              key: state_container
                        - name: OIDC_ISSUER_URL
                          valueFrom:
                            configMapKeyRef:
                              name: tf-configmap
                              key: oidc_issuer_url
                        - name: VIRTUAL_NETWORK_SUBNET_IDS
                          valueFrom:
                            configMapKeyRef:
                              name: tf-configmap
                              key: virtual_network_subnet_ids
                        - name: APP_NAME
                          value: "testapp"
                      volumeMounts:
                        - mountPath: /tfplan
                          name: tfplan
                    outputs:
                      artifacts:
                        - name: tfplan
                          path: /tfplan/tfplan
                          archive:
                            none: {}
                  - name: tf-apply
                    serviceAccountName: terraform-app-sa
                    metadata:
                      labels:
                        azure.workload.identity/use: "true"
                    volumes:
                      - emptyDir: {}
                        name: tfplan
                    inputs:
                      artifacts:
                        - name: tfplan
                          path: /tfplan/tfplan
                    container:
                      image: cdpargoyy.azurecr.io/cdpargoyy/argo-app:8f45797f8a5c740c3f33d4458210273c63d57645
                      name: tf-app
                      args: [
                              "terraform",
                              "apply",
                              "-input=false",
                              "/tfplan/tfplan",
                            ]
                      env:
                        - name: ARM_SUBSCRIPTION_ID
                          valueFrom:
                            configMapKeyRef:
                              name: tf-configmap
                              key: az_subscription_id
                        - name: RG_SA_STATE
                          valueFrom:
                            configMapKeyRef:
                              name: tf-configmap
                              key: state_rg
                        - name: SA_STATE
                          valueFrom:
                            configMapKeyRef:
                              name: tf-configmap
                              key: state_sa
                        - name: CONTAINER_STATE
                          valueFrom:
                            configMapKeyRef:
                              name: tf-configmap
                              key: state_container
                        - name: APP_NAME
                          value: "testapp"
                      volumeMounts:
                        - mountPath: /tfplan
                          name: tfplan
                    outputs:
                      artifacts:
                        - name: tfplan
                          path: /tfplan/tfplan
                          archive:
                            none: {}
                  - name: wait
                    suspend: {}

                  - name: main
                    inputs:
                      parameters:
                        - name: modified-configs                    
                    dag:
                      tasks:
                        - name: git
                          template: git
                        # - name: print-message
                        #   template: whalesay
                        #   arguments:
                        #     parameters:
                        #     - name: message
                        #       value: "{{item}}"
                        #   withParam: "{{inputs.parameters.modified-configs}}"                          
                        - name: jq
                          template: jq
                          arguments:
                            parameters:
                            - name: config
                              value: "{{item}}"
                            artifacts:
                              - name: tfconfig
                                from: "{{tasks.git.outputs.artifacts.tfconfig}}"                              
                          withParam: "{{inputs.parameters.modified-configs}}"
                          dependencies:
                            - git                          
                        # - name: tf-plan
                        #   template: tf-plan
                        #   arguments:
                        #     artifacts:
                        #       - name: tfconfig
                        #         from: "{{tasks.git.outputs.artifacts.tfconfig}}"
                        #   dependencies:
                        #     - message
                        # - name: tf-apply
                        #   template: tf-apply
                        #   arguments:
                        #     artifacts:
                        #       - name: tfplan
                        #         from: "{{tasks.tf-plan.outputs.artifacts.tfplan}}"
                        #   dependencies:
                        #     - tf-plan                           
          parameters:
            - src:
                dependencyName: test-dep
                dataKey: body.repository.html_url
              dest: spec.arguments.parameters.0.value
            - src:
                dependencyName: test-dep
                dataKey: body.commits.#(modified.#(%"apps-tf*"))#.modified.#(%"apps-tf*")#|@flatten   #.modified.#(%"apps-tf*")
              dest: spec.arguments.parameters.1.value              
      retryStrategy:
        steps: 3