---
# Source: argocd-config/templates/argo-externalsecrets.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    azure.workload.identity/client-id: 408e4354-59d7-4e35-967c-c5f9db52ff68
    azure.workload.identity/tenant-id: 703922c4-f042-4683-9e67-a969c8abc975
  name: external-secrets-sa
  namespace: argo
---
# Source: argocd-config/templates/argocd-externalsecrets.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    azure.workload.identity/client-id: 408e4354-59d7-4e35-967c-c5f9db52ff68
    azure.workload.identity/tenant-id: 703922c4-f042-4683-9e67-a969c8abc975
  name: external-secrets-sa
  namespace: argocd
---
# Source: argocd-config/templates/argocd-cm-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
  name: argocd-cm
  namespace: argocd
data:
  oidc.config: |
    name: Azure
    issuer: https://login.microsoftonline.com/703922c4-f042-4683-9e67-a969c8abc975/v2.0
    clientID: $argocd-sso-secret:oidc-azure-clientId
    clientSecret: $argocd-sso-secret:oidc-azure-clientSecret
    requestedScopes: [openid profile email]
  url: https://argocd.crabdance.com/
---
# Source: argocd-config/templates/argocd-rbac-cm-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: argocd-rbac-cm
    app.kubernetes.io/part-of: argocd
  name: argocd-rbac-cm
  namespace: argocd
data:
  policy.csv: | 
    p, role:ops, applications, *, */*, allow
    p, role:ops, logs, get, */*, allow
    p, role:ops, exec, create, */*, allow
    p, role:ops, clusters, get, *, allow
    p, role:ops, repositories, get, *, allow
    g, Admin, role:admin
  policy.default: role:readonly
  scopes: '[roles, email]'
---
# Source: argocd-config/templates/agocd-ingress-rule.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-server-ingress
  namespace: argocd
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
spec:
  rules:
  - host: argocd.crabdance.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: argocd-server
            port:
              name: https
  tls:
  - hosts:
    - argocd.crabdance.com
    secretName: argocd-secret # do not change, this is provided by Argo CD
---
# Source: argocd-config/templates/cert-manager-clusterissuer.yaml
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: yy@datainsights.de
    privateKeySecretRef:
      name: letsencrypt
    solvers:
    - http01:
        ingress:
          class: nginx
          podTemplate:
            spec:
              nodeSelector:
                "kubernetes.io/os": linux
---
# Source: argocd-config/templates/argo-externalsecrets.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: external-secrets
  namespace: argo
spec:
  refreshInterval: 1h           # rate ESO pulls Azure Key Vault
  secretStoreRef:
    kind: SecretStore
    name: azure-store           # name of the SecretStore (or kind specified)
  target:
    name: argo-sso-secret           # name of the k8s Secret to be created
    creationPolicy: Owner
  dataFrom:
  # find all secrets
  - find:
      name:
        regexp: ".*"
    rewrite:
    # replace all special symbols with _
    - regexp:
        source: "[^a-zA-Z0-9 -]"
        target: "_"
---
# Source: argocd-config/templates/argocd-externalsecrets.yaml
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: external-secrets
  namespace: argocd
spec:
  refreshInterval: 1h           # rate ESO pulls Azure Key Vault
  secretStoreRef:
    kind: SecretStore
    name: azure-store           # name of the SecretStore (or kind specified)
  target:
    name: argocd-sso-secret           # name of the k8s Secret to be created
    creationPolicy: Owner
    template:
      metadata:
        labels:
          app.kubernetes.io/part-of: argocd
  dataFrom:
  # find all secrets
  - find:
      name:
        regexp: ".*"
    rewrite:
    # replace all special symbols with _
    - regexp:
        source: "[^a-zA-Z0-9 -]"
        target: "_"
---
# Source: argocd-config/templates/argo-externalsecrets.yaml
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: azure-store
  namespace: argo
spec:
  provider:
    # provider type: azure keyvault
    azurekv:
      authType: WorkloadIdentity
      # URL of your vault instance, see: https://docs.microsoft.com/en-us/azure/key-vault/general/about-keys-secrets-certificates
      vaultUrl: https://cdpargo-aks-yy-kv.vault.azure.net
      serviceAccountRef:
        name: external-secrets-sa
---
# Source: argocd-config/templates/argocd-externalsecrets.yaml
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: azure-store
  namespace: argocd
spec:
  provider:
    # provider type: azure keyvault
    azurekv:
      authType: WorkloadIdentity
      # URL of your vault instance, see: https://docs.microsoft.com/en-us/azure/key-vault/general/about-keys-secrets-certificates
      vaultUrl: https://cdpargo-aks-yy-kv.vault.azure.net
      serviceAccountRef:
        name: external-secrets-sa
